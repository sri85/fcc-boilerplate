/** ****************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ************************************************** */
const fs = require('fs');
const express = require('express');

const app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use((req, res, next) => {
    const allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    const origin = req.headers.origin || '*';
    if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      res.setHeader('Access-Control-Allow-Origin', origin);
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    }
    next();
  });
}

app.use('/public', express.static(`${process.cwd()}/public`));

app.route('/_api/package.json')
  .get((req, res, next) => {
    fs.readFile(`${__dirname}/package.json`, (err, data) => {
      if (err) {
        return next(err);
      }
      return res.type('txt').send(data.toString());
    });
  });

app.route('/')
  .get((req, res) => {
    res.sendFile(`${process.cwd()}/views/index.html`);
  });

// Respond not found to all the wrong routes
app.use((req, res, next) => {
  res.status(404);
  res.type('txt').send('Not found');
  next();
});

// Error Middleware
app.use((err, req, res, next) => {
  if (err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
  next();
});

app.listen(3000, (err) => {
  if (err) {
    throw err;
  }
});

module.exports = app;
